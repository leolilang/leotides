{"version":3,"sources":["index.js","nodes/comment.js","nodes/node.js","nodes/type.js","nodes/html.js","back.js","matcher.js","void-tag.js","nodes/text.js","parse.js","valid.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,AGTA,AFMA,ACHA;AHUA,ACHA,AGTA,AFMA,ACHA;AHUA,ACHA,AGTA,AFMA,ACHA;AELA,ALeA,ACHA,AGTA,AFMA,ACHA;AELA,ALeA,ACHA,AGTA,AFMA,ACHA;AELA,ALeA,ACHA,AGTA,AFMA,ACHA;AELA,ALeA,AMlBA,ALeA,AGTA,AFMA,ACHA;AELA,ALeA,AMlBA,ALeA,AGTA,AFMA;AGRA,ALeA,AMlBA,ALeA,AGTA,AFMA;AGRA,ALeA,AMlBA,ALeA,AGTA,AFMA,AKfA;APsBA,AMlBA,ALeA,AGTA,AFMA,AKfA;APsBA,AMlBA,ALeA,AGTA,AFMA,AKfA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ADGA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ADGA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ADGA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ACHA,AFMA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ACHA,AFMA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ACHA,AFMA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ACHA,ACHA,AHSA;APsBA,AMlBA,ALeA,AGTA,AFMA,AMlBA,ACHA,ACHA,AHSA;ADIA,ALeA,AGTA,AFMA,AMlBA,ACHA,ACHA,AHSA;ADIA,ALeA,AGTA,AFMA,AMlBA,AENA,AHSA;ADIA,ALeA,AGTA,AFMA,AMlBA,AENA,AHSA;ADIA,ALeA,AGTA,AFMA,AMlBA,AENA,AHSA;ADIA,ALeA,AGTA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,AENA,AHSA;ADIA,AFMA,AFMA,AMlBA,ADGA;ADIA,AFMA,AFMA,AMlBA,ADGA;ADIA,AFMA,AFMA,AMlBA,ADGA;ADIA,AFMA,AFMA,AMlBA,ADGA;ADIA,AFMA,AFMA,AMlaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJafile":"index.js","sourcesContent":["\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeType = exports.TextNode = exports.Node = exports.valid = exports.CommentNode = exports.HTMLElement = exports.parse = void 0;\nconst comment_1 = __importDefault(require(\"./nodes/comment\"));\nexports.CommentNode = comment_1.default;\nconst html_1 = __importDefault(require(\"./nodes/html\"));\nexports.HTMLElement = html_1.default;\nconst node_1 = __importDefault(require(\"./nodes/node\"));\nexports.Node = node_1.default;\nconst text_1 = __importDefault(require(\"./nodes/text\"));\nexports.TextNode = text_1.default;\nconst type_1 = __importDefault(require(\"./nodes/type\"));\nexports.NodeType = type_1.default;\nconst parse_1 = __importDefault(require(\"./parse\"));\nconst valid_1 = __importDefault(require(\"./valid\"));\nexports.valid = valid_1.default;\nfunction parse(data, options = {}) {\n    return (0, parse_1.default)(data, options);\n}\nexports.default = parse;\nexports.parse = parse;\nparse.parse = parse_1.default;\nparse.HTMLElement = html_1.default;\nparse.CommentNode = comment_1.default;\nparse.valid = valid_1.default;\nparse.Node = node_1.default;\nparse.TextNode = text_1.default;\nparse.NodeType = type_1.default;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst node_1 = __importDefault(require(\"./node\"));\nconst type_1 = __importDefault(require(\"./type\"));\nclass CommentNode extends node_1.default {\n    clone() {\n        return new CommentNode(this.rawText, null, undefined, this.rawTagName);\n    }\n    constructor(rawText, parentNode = null, range, rawTagName = '!--') {\n        super(parentNode, range);\n        this.rawText = rawText;\n        this.rawTagName = rawTagName;\n        /**\n         * Node Type declaration.\n         * @type {Number}\n         */\n        this.nodeType = type_1.default.COMMENT_NODE;\n    }\n    /**\n     * Get unescaped text value of current node and its children.\n     * @return {string} text content\n     */\n    get text() {\n        return this.rawText;\n    }\n    toString() {\n        return `<!--${this.rawText}-->`;\n    }\n}\nexports.default = CommentNode;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst he_1 = require(\"he\");\n/**\n * Node Class as base class for TextNode and HTMLElement.\n */\nclass Node {\n    constructor(parentNode = null, range) {\n        this.parentNode = parentNode;\n        this.childNodes = [];\n        Object.defineProperty(this, 'range', {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: range !== null && range !== void 0 ? range : [-1, -1]\n        });\n    }\n    /**\n     * Remove current node\n     */\n    remove() {\n        if (this.parentNode) {\n            const children = this.parentNode.childNodes;\n            this.parentNode.childNodes = children.filter((child) => {\n                return this !== child;\n            });\n            this.parentNode = null;\n        }\n        return this;\n    }\n    get innerText() {\n        return this.rawText;\n    }\n    get textContent() {\n        return (0, he_1.decode)(this.rawText);\n    }\n    set textContent(val) {\n        this.rawText = (0, he_1.encode)(val);\n    }\n}\nexports.default = Node;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"ELEMENT_NODE\"] = 1] = \"ELEMENT_NODE\";\n    NodeType[NodeType[\"TEXT_NODE\"] = 3] = \"TEXT_NODE\";\n    NodeType[NodeType[\"COMMENT_NODE\"] = 8] = \"COMMENT_NODE\";\n})(NodeType || (NodeType = {}));\nexports.default = NodeType;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = exports.base_parse = void 0;\nconst css_select_1 = require(\"css-select\");\nconst he_1 = __importDefault(require(\"he\"));\nconst back_1 = __importDefault(require(\"../back\"));\nconst matcher_1 = __importDefault(require(\"../matcher\"));\nconst void_tag_1 = __importDefault(require(\"../void-tag\"));\nconst comment_1 = __importDefault(require(\"./comment\"));\nconst node_1 = __importDefault(require(\"./node\"));\nconst text_1 = __importDefault(require(\"./text\"));\nconst type_1 = __importDefault(require(\"./type\"));\nfunction decode(val) {\n    // clone string\n    return JSON.parse(JSON.stringify(he_1.default.decode(val)));\n}\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\nconst Htags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup'];\nconst Dtags = ['details', 'dialog', 'dd', 'div', 'dt'];\nconst Ftags = ['fieldset', 'figcaption', 'figure', 'footer', 'form'];\nconst tableTags = ['table', 'td', 'tr'];\nconst htmlTags = ['address', 'article', 'aside', 'blockquote', 'br', 'hr', 'li', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'ul'];\nconst kBlockElements = new Set();\nfunction addToKBlockElement(...args) {\n    const addToSet = (array) => {\n        for (let index = 0; index < array.length; index++) {\n            const element = array[index];\n            kBlockElements.add(element);\n            kBlockElements.add(element.toUpperCase());\n        }\n    };\n    for (const arg of args)\n        addToSet(arg);\n}\naddToKBlockElement(Htags, Dtags, Ftags, tableTags, htmlTags);\nclass DOMTokenList {\n    _validate(c) {\n        if (/\\s/.test(c)) {\n            throw new Error(`DOMException in DOMTokenList.add: The token '${c}' contains HTML space characters, which are not valid in tokens.`);\n        }\n    }\n    constructor(valuesInit = [], afterUpdate = () => null) {\n        this._set = new Set(valuesInit);\n        this._afterUpdate = afterUpdate;\n    }\n    add(c) {\n        this._validate(c);\n        this._set.add(c);\n        this._afterUpdate(this); // eslint-disable-line @typescript-eslint/no-unsafe-call\n    }\n    replace(c1, c2) {\n        this._validate(c2);\n        this._set.delete(c1);\n        this._set.add(c2);\n        this._afterUpdate(this); // eslint-disable-line @typescript-eslint/no-unsafe-call\n    }\n    remove(c) {\n        this._set.delete(c) && this._afterUpdate(this); // eslint-disable-line @typescript-eslint/no-unsafe-call\n    }\n    toggle(c) {\n        this._validate(c);\n        if (this._set.has(c))\n            this._set.delete(c);\n        else\n            this._set.add(c);\n        this._afterUpdate(this); // eslint-disable-line @typescript-eslint/no-unsafe-call\n    }\n    contains(c) {\n        return this._set.has(c);\n    }\n    get length() {\n        return this._set.size;\n    }\n    values() {\n        return this._set.values();\n    }\n    get value() {\n        return Array.from(this._set.values());\n    }\n    toString() {\n        return Array.from(this._set.values()).join(' ');\n    }\n}\n/**\n * HTMLElement, which contains a set of children.\n *\n * Note: this is a minimalist implementation, no complete tree\n *   structure provided (no parentNode, nextSibling,\n *   previousSibling etc).\n * @class HTMLElement\n * @extends {Node}\n */\nclass HTMLElement extends node_1.default {\n    /**\n     * Quote attribute values\n     * @param attr attribute value\n     * @returns {string} quoted value\n     */\n    quoteAttribute(attr) {\n        if (attr == null) {\n            return 'null';\n        }\n        return JSON.stringify(attr.replace(/\"/g, '&quot;'))\n            .replace(/\\\\t/g, '\\t')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\/g, '');\n    }\n    /**\n     * Creates an instance of HTMLElement.\n     * @param keyAttrs\tid and class attribute\n     * @param [rawAttrs]\tattributes in string\n     *\n     * @memberof HTMLElement\n     */\n    constructor(tagName, keyAttrs, rawAttrs = '', parentNode = null, range, voidTag = new void_tag_1.default(), _parseOptions = {}) {\n        super(parentNode, range);\n        this.rawAttrs = rawAttrs;\n        this.voidTag = voidTag;\n        /**\n         * Node Type declaration.\n         */\n        this.nodeType = type_1.default.ELEMENT_NODE;\n        this.rawTagName = tagName;\n        this.rawAttrs = rawAttrs || '';\n        this.id = keyAttrs.id || '';\n        this.childNodes = [];\n        this._parseOptions = _parseOptions;\n        this.classList = new DOMTokenList(keyAttrs.class ? keyAttrs.class.split(/\\s+/) : [], (classList) => this.setAttribute('class', classList.toString()) // eslint-disable-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        );\n        if (keyAttrs.id) {\n            if (!rawAttrs) {\n                this.rawAttrs = `id=\"${keyAttrs.id}\"`;\n            }\n        }\n        if (keyAttrs.class) {\n            if (!rawAttrs) {\n                const cls = `class=\"${this.classList.toString()}\"`;\n                if (this.rawAttrs) {\n                    this.rawAttrs += ` ${cls}`;\n                }\n                else {\n                    this.rawAttrs = cls;\n                }\n            }\n        }\n    }\n    /**\n     * Remove Child element from childNodes array\n     * @param {HTMLElement} node     node to remove\n     */\n    removeChild(node) {\n        this.childNodes = this.childNodes.filter((child) => {\n            return child !== node;\n        });\n        return this;\n    }\n    /**\n     * Exchanges given child with new child\n     * @param {HTMLElement} oldNode     node to exchange\n     * @param {HTMLElement} newNode     new node\n     */\n    exchangeChild(oldNode, newNode) {\n        const children = this.childNodes;\n        this.childNodes = children.map((child) => {\n            if (child === oldNode) {\n                return newNode;\n            }\n            return child;\n        });\n        return this;\n    }\n    get tagName() {\n        return this.rawTagName ? this.rawTagName.toUpperCase() : this.rawTagName;\n    }\n    set tagName(newname) {\n        this.rawTagName = newname.toLowerCase();\n    }\n    get localName() {\n        return this.rawTagName.toLowerCase();\n    }\n    get isVoidElement() {\n        return this.voidTag.isVoidElement(this.localName);\n    }\n    /**\n     * Get escpaed (as-it) text value of current node and its children.\n     * @return {string} text content\n     */\n    get rawText() {\n        // https://github.com/taoqf/node-html-parser/issues/249\n        if (/^br$/i.test(this.rawTagName)) {\n            return '\\n';\n        }\n        return this.childNodes.reduce((pre, cur) => {\n            return (pre += cur.rawText);\n        }, '');\n    }\n    get textContent() {\n        return decode(this.rawText);\n    }\n    set textContent(val) {\n        const content = [new text_1.default(val, this)];\n        this.childNodes = content;\n    }\n    /**\n     * Get unescaped text value of current node and its children.\n     * @return {string} text content\n     */\n    get text() {\n        return decode(this.rawText);\n    }\n    /**\n     * Get structured Text (with '\\n' etc.)\n     * @return {string} structured text\n     */\n    get structuredText() {\n        let currentBlock = [];\n        const blocks = [currentBlock];\n        function dfs(node) {\n            if (node.nodeType === type_1.default.ELEMENT_NODE) {\n                if (kBlockElements.has(node.rawTagName)) {\n                    if (currentBlock.length > 0) {\n                        blocks.push((currentBlock = []));\n                    }\n                    node.childNodes.forEach(dfs);\n                    if (currentBlock.length > 0) {\n                        blocks.push((currentBlock = []));\n                    }\n                }\n                else {\n                    node.childNodes.forEach(dfs);\n                }\n            }\n            else if (node.nodeType === type_1.default.TEXT_NODE) {\n                if (node.isWhitespace) {\n                    // Whitespace node, postponed output\n                    currentBlock.prependWhitespace = true;\n                }\n                else {\n                    let text = node.trimmedText;\n                    if (currentBlock.prependWhitespace) {\n                        text = ` ${text}`;\n                        currentBlock.prependWhitespace = false;\n                    }\n                    currentBlock.push(text);\n                }\n            }\n        }\n        dfs(this);\n        return blocks\n            .map((block) => {\n            return block.join('').replace(/\\s{2,}/g, ' '); // Normalize each line's whitespace\n        })\n            .join('\\n')\n            .replace(/\\s+$/, ''); // trimRight;\n    }\n    toString() {\n        const tag = this.rawTagName;\n        if (tag) {\n            const attrs = this.rawAttrs ? ` ${this.rawAttrs}` : '';\n            return this.voidTag.formatNode(tag, attrs, this.innerHTML);\n        }\n        return this.innerHTML;\n    }\n    get innerHTML() {\n        return this.childNodes\n            .map((child) => {\n            return child.toString();\n        })\n            .join('');\n    }\n    set innerHTML(content) {\n        const r = parse(content, this._parseOptions);\n        const nodes = r.childNodes.length ? r.childNodes : [new text_1.default(content, this)];\n        resetParent(nodes, this);\n        resetParent(this.childNodes, null);\n        this.childNodes = nodes;\n    }\n    set_content(content, options = {}) {\n        if (content instanceof node_1.default) {\n            content = [content];\n        }\n        else if (typeof content == 'string') {\n            options = Object.assign(Object.assign({}, this._parseOptions), options);\n            const r = parse(content, options);\n            content = r.childNodes.length ? r.childNodes : [new text_1.default(r.innerHTML, this)];\n        }\n        resetParent(this.childNodes, null);\n        resetParent(content, this);\n        this.childNodes = content;\n        return this;\n    }\n    replaceWith(...nodes) {\n        const parent = this.parentNode;\n        const content = nodes\n            .map((node) => {\n            if (node instanceof node_1.default) {\n                return [node];\n            }\n            else if (typeof node == 'string') {\n                const r = parse(node, this._parseOptions);\n                return r.childNodes.length ? r.childNodes : [new text_1.default(node, this)];\n            }\n            return [];\n        })\n            .flat();\n        const idx = parent.childNodes.findIndex((child) => {\n            return child === this;\n        });\n        resetParent([this], null);\n        parent.childNodes = [...parent.childNodes.slice(0, idx), ...resetParent(content, parent), ...parent.childNodes.slice(idx + 1)];\n        return this;\n    }\n    get outerHTML() {\n        return this.toString();\n    }\n    /**\n     * Trim element from right (in block) after seeing pattern in a TextNode.\n     * @param  {RegExp} pattern pattern to find\n     * @return {HTMLElement}    reference to current node\n     */\n    trimRight(pattern) {\n        for (let i = 0; i < this.childNodes.length; i++) {\n            const childNode = this.childNodes[i];\n            if (childNode.nodeType === type_1.default.ELEMENT_NODE) {\n                childNode.trimRight(pattern);\n            }\n            else {\n                const index = childNode.rawText.search(pattern);\n                if (index > -1) {\n                    childNode.rawText = childNode.rawText.substr(0, index);\n                    // trim all following nodes.\n                    this.childNodes.length = i + 1;\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Get DOM structure\n     * @return {string} structure\n     */\n    get structure() {\n        const res = [];\n        let indention = 0;\n        function write(str) {\n            res.push('  '.repeat(indention) + str);\n        }\n        function dfs(node) {\n            const idStr = node.id ? `#${node.id}` : '';\n            const classStr = node.classList.length ? `.${node.classList.value.join('.')}` : ''; // eslint-disable-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-unsafe-call\n            write(`${node.rawTagName}${idStr}${classStr}`);\n            indention++;\n            node.childNodes.forEach((childNode) => {\n                if (childNode.nodeType === type_1.default.ELEMENT_NODE) {\n                    dfs(childNode);\n                }\n                else if (childNode.nodeType === type_1.default.TEXT_NODE) {\n                    if (!childNode.isWhitespace) {\n                        write('#text');\n                    }\n                }\n            });\n            indention--;\n        }\n        dfs(this);\n        return res.join('\\n');\n    }\n    /**\n     * Remove whitespaces in this sub tree.\n     * @return {HTMLElement} pointer to this\n     */\n    removeWhitespace() {\n        let o = 0;\n        this.childNodes.forEach((node) => {\n            if (node.nodeType === type_1.default.TEXT_NODE) {\n                if (node.isWhitespace) {\n                    return;\n                }\n                node.rawText = node.trimmedRawText;\n            }\n            else if (node.nodeType === type_1.default.ELEMENT_NODE) {\n                node.removeWhitespace();\n            }\n            this.childNodes[o++] = node;\n        });\n        this.childNodes.length = o;\n        // remove whitespace between attributes\n        const attrs = Object.keys(this.rawAttributes)\n            .map((key) => {\n            const val = this.rawAttributes[key];\n            return `${key}=${JSON.stringify(val)}`;\n        })\n            .join(' ');\n        this.rawAttrs = attrs;\n        delete this._rawAttrs;\n        return this;\n    }\n    /**\n     * Query CSS selector to find matching nodes.\n     * @param  {string}         selector Simplified CSS selector\n     * @return {HTMLElement[]}  matching elements\n     */\n    querySelectorAll(selector) {\n        return (0, css_select_1.selectAll)(selector, this, {\n            xmlMode: true,\n            adapter: matcher_1.default,\n        });\n    }\n    /**\n     * Query CSS Selector to find matching node.\n     * @param  {string}         selector Simplified CSS selector\n     * @return {(HTMLElement|null)}    matching node\n     */\n    querySelector(selector) {\n        return (0, css_select_1.selectOne)(selector, this, {\n            xmlMode: true,\n            adapter: matcher_1.default,\n        });\n    }\n    /**\n     * find elements by their tagName\n     * @param {string} tagName the tagName of the elements to select\n     */\n    getElementsByTagName(tagName) {\n        const upperCasedTagName = tagName.toUpperCase();\n        const re = [];\n        const stack = [];\n        let currentNodeReference = this;\n        let index = 0;\n        // index turns to undefined once the stack is empty and the first condition occurs\n        // which happens once all relevant children are searched through\n        while (index !== undefined) {\n            let child;\n            // make it work with sparse arrays\n            do {\n                child = currentNodeReference.childNodes[index++];\n            } while (index < currentNodeReference.childNodes.length && child === undefined);\n            // if the child does not exist we move on with the last provided index (which belongs to the parentNode)\n            if (child === undefined) {\n                currentNodeReference = currentNodeReference.parentNode;\n                index = stack.pop();\n                continue;\n            }\n            if (child.nodeType === type_1.default.ELEMENT_NODE) {\n                // https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName#syntax\n                if (tagName === '*' || child.tagName === upperCasedTagName)\n                    re.push(child);\n                // if children are existing push the current status to the stack and keep searching for elements in the level below\n                if (child.childNodes.length > 0) {\n                    stack.push(index);\n                    currentNodeReference = child;\n                    index = 0;\n                }\n            }\n        }\n        return re;\n    }\n    /**\n     * find element by it's id\n     * @param {string} id the id of the element to select\n     * @returns {HTMLElement | null} the element with the given id or null if not found\n     */\n    getElementById(id) {\n        const stack = [];\n        let currentNodeReference = this;\n        let index = 0;\n        // index turns to undefined once the stack is empty and the first condition occurs\n        // which happens once all relevant children are searched through\n        while (index !== undefined) {\n            let child;\n            // make it work with sparse arrays\n            do {\n                child = currentNodeReference.childNodes[index++];\n            } while (index < currentNodeReference.childNodes.length && child === undefined);\n            // if the child does not exist we move on with the last provided index (which belongs to the parentNode)\n            if (child === undefined) {\n                currentNodeReference = currentNodeReference.parentNode;\n                index = stack.pop();\n                continue;\n            }\n            if (child.nodeType === type_1.default.ELEMENT_NODE) {\n                if (child.id === id) {\n                    return child;\n                }\n                // if children are existing push the current status to the stack and keep searching for elements in the level below\n                if (child.childNodes.length > 0) {\n                    stack.push(index);\n                    currentNodeReference = child;\n                    index = 0;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * traverses the Element and its parents (heading toward the document root) until it finds a node that matches the provided selector string. Will return itself or the matching ancestor. If no such element exists, it returns null.\n     * @param selector a DOMString containing a selector list\n     * @returns {HTMLElement | null} the element with the given id or null if not found\n     */\n    closest(selector) {\n        const mapChild = new Map();\n        let el = this;\n        let old = null;\n        function findOne(test, elems) {\n            let elem = null;\n            for (let i = 0, l = elems.length; i < l && !elem; i++) {\n                const el = elems[i];\n                if (test(el)) {\n                    elem = el;\n                }\n                else {\n                    const child = mapChild.get(el);\n                    if (child) {\n                        elem = findOne(test, [child]);\n                    }\n                }\n            }\n            return elem;\n        }\n        while (el) {\n            mapChild.set(el, old);\n            old = el;\n            el = el.parentNode;\n        }\n        el = this;\n        while (el) {\n            const e = (0, css_select_1.selectOne)(selector, el, {\n                xmlMode: true,\n                adapter: Object.assign(Object.assign({}, matcher_1.default), { getChildren(node) {\n                        const child = mapChild.get(node);\n                        return child && [child];\n                    },\n                    getSiblings(node) {\n                        return [node];\n                    },\n                    findOne,\n                    findAll() {\n                        return [];\n                    } }),\n            });\n            if (e) {\n                return e;\n            }\n            el = el.parentNode;\n        }\n        return null;\n    }\n    /**\n     * Append a child node to childNodes\n     * @param  {Node} node node to append\n     * @return {Node}      node appended\n     */\n    appendChild(node) {\n        this.append(node);\n        return node;\n    }\n    /**\n     * Get attributes\n     * @access private\n     * @return {Object} parsed and unescaped attributes\n     */\n    get attrs() {\n        if (this._attrs) {\n            return this._attrs;\n        }\n        this._attrs = {};\n        const attrs = this.rawAttributes;\n        for (const key in attrs) {\n            const val = attrs[key] || '';\n            this._attrs[key.toLowerCase()] = decode(val);\n        }\n        return this._attrs;\n    }\n    get attributes() {\n        const ret_attrs = {};\n        const attrs = this.rawAttributes;\n        for (const key in attrs) {\n            const val = attrs[key] || '';\n            ret_attrs[key] = decode(val);\n        }\n        return ret_attrs;\n    }\n    /**\n     * Get escaped (as-is) attributes\n     * @return {Object} parsed attributes\n     */\n    get rawAttributes() {\n        if (this._rawAttrs) {\n            return this._rawAttrs;\n        }\n        const attrs = {};\n        if (this.rawAttrs) {\n            const re = /([a-zA-Z()[\\]#@$.?:][a-zA-Z0-9-._:()[\\]#]*)(?:\\s*=\\s*((?:'[^']*')|(?:\"[^\"]*\")|\\S+))?/g;\n            let match;\n            while ((match = re.exec(this.rawAttrs))) {\n                const key = match[1];\n                let val = match[2] || null;\n                if (val && (val[0] === `'` || val[0] === `\"`))\n                    val = val.slice(1, val.length - 1);\n                attrs[key] = attrs[key] || val;\n            }\n        }\n        this._rawAttrs = attrs;\n        return attrs;\n    }\n    removeAttribute(key) {\n        const attrs = this.rawAttributes;\n        delete attrs[key];\n        // Update this.attribute\n        if (this._attrs) {\n            delete this._attrs[key];\n        }\n        // Update rawString\n        this.rawAttrs = Object.keys(attrs)\n            .map((name) => {\n            const val = this.quoteAttribute(attrs[name]);\n            if (val === 'null' || val === '\"\"')\n                return name;\n            return `${name}=${val}`;\n        })\n            .join(' ');\n        // Update this.id\n        if (key === 'id') {\n            this.id = '';\n        }\n        return this;\n    }\n    hasAttribute(key) {\n        return key.toLowerCase() in this.attrs;\n    }\n    /**\n     * Get an attribute\n     * @return {string | undefined} value of the attribute; or undefined if not exist\n     */\n    getAttribute(key) {\n        return this.attrs[key.toLowerCase()];\n    }\n    /**\n     * Set an attribute value to the HTMLElement\n     * @param {string} key The attribute name\n     * @param {string} value The value to set, or null / undefined to remove an attribute\n     */\n    setAttribute(key, value) {\n        if (arguments.length < 2) {\n            throw new Error(\"Failed to execute 'setAttribute' on 'Element'\");\n        }\n        const k2 = key.toLowerCase();\n        const attrs = this.rawAttributes;\n        for (const k in attrs) {\n            if (k.toLowerCase() === k2) {\n                key = k;\n                break;\n            }\n        }\n        attrs[key] = String(value);\n        // update this.attrs\n        if (this._attrs) {\n            this._attrs[k2] = decode(attrs[key]);\n        }\n        // Update rawString\n        this.rawAttrs = Object.keys(attrs)\n            .map((name) => {\n            const val = this.quoteAttribute(attrs[name]);\n            if (val === 'null' || val === '\"\"')\n                return name;\n            return `${name}=${val}`;\n        })\n            .join(' ');\n        // Update this.id\n        if (key === 'id') {\n            this.id = value;\n        }\n        return this;\n    }\n    /**\n     * Replace all the attributes of the HTMLElement by the provided attributes\n     * @param {Attributes} attributes the new attribute set\n     */\n    setAttributes(attributes) {\n        // Invalidate current this.attributes\n        if (this._attrs) {\n            delete this._attrs;\n        }\n        // Invalidate current this.rawAttributes\n        if (this._rawAttrs) {\n            delete this._rawAttrs;\n        }\n        // Update rawString\n        this.rawAttrs = Object.keys(attributes)\n            .map((name) => {\n            const val = attributes[name];\n            if (val === 'null' || val === '\"\"')\n                return name;\n            return `${name}=${this.quoteAttribute(String(val))}`;\n        })\n            .join(' ');\n        return this;\n    }\n    insertAdjacentHTML(where, html) {\n        if (arguments.length < 2) {\n            throw new Error('2 arguments required');\n        }\n        const p = parse(html, this._parseOptions);\n        if (where === 'afterend') {\n            this.after(...p.childNodes);\n        }\n        else if (where === 'afterbegin') {\n            this.prepend(...p.childNodes);\n        }\n        else if (where === 'beforeend') {\n            this.append(...p.childNodes);\n        }\n        else if (where === 'beforebegin') {\n            this.before(...p.childNodes);\n        }\n        else {\n            throw new Error(`The value provided ('${where}') is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'`);\n        }\n        return this;\n    }\n    /** Prepend nodes or strings to this node's children. */\n    prepend(...insertable) {\n        const nodes = resolveInsertable(insertable);\n        resetParent(nodes, this);\n        this.childNodes.unshift(...nodes);\n    }\n    /** Append nodes or strings to this node's children. */\n    append(...insertable) {\n        const nodes = resolveInsertable(insertable);\n        resetParent(nodes, this);\n        this.childNodes.push(...nodes);\n    }\n    /** Insert nodes or strings before this node. */\n    before(...insertable) {\n        const nodes = resolveInsertable(insertable);\n        const siblings = this.parentNode.childNodes;\n        resetParent(nodes, this.parentNode);\n        siblings.splice(siblings.indexOf(this), 0, ...nodes);\n    }\n    /** Insert nodes or strings after this node. */\n    after(...insertable) {\n        const nodes = resolveInsertable(insertable);\n        const siblings = this.parentNode.childNodes;\n        resetParent(nodes, this.parentNode);\n        siblings.splice(siblings.indexOf(this) + 1, 0, ...nodes);\n    }\n    get nextSibling() {\n        if (this.parentNode) {\n            const children = this.parentNode.childNodes;\n            let i = 0;\n            while (i < children.length) {\n                const child = children[i++];\n                if (this === child)\n                    return children[i] || null;\n            }\n            return null;\n        }\n    }\n    get nextElementSibling() {\n        if (this.parentNode) {\n            const children = this.parentNode.childNodes;\n            let i = 0;\n            let find = false;\n            while (i < children.length) {\n                const child = children[i++];\n                if (find) {\n                    if (child instanceof HTMLElement) {\n                        return child || null;\n                    }\n                }\n                else if (this === child) {\n                    find = true;\n                }\n            }\n            return null;\n        }\n    }\n    get previousSibling() {\n        if (this.parentNode) {\n            const children = this.parentNode.childNodes;\n            let i = children.length;\n            while (i > 0) {\n                const child = children[--i];\n                if (this === child)\n                    return children[i - 1] || null;\n            }\n            return null;\n        }\n    }\n    get previousElementSibling() {\n        if (this.parentNode) {\n            const children = this.parentNode.childNodes;\n            let i = children.length;\n            let find = false;\n            while (i > 0) {\n                const child = children[--i];\n                if (find) {\n                    if (child instanceof HTMLElement) {\n                        return child || null;\n                    }\n                }\n                else if (this === child) {\n                    find = true;\n                }\n            }\n            return null;\n        }\n    }\n    /** Get all childNodes of type {@link HTMLElement}. */\n    get children() {\n        const children = [];\n        for (const childNode of this.childNodes) {\n            if (childNode instanceof HTMLElement) {\n                children.push(childNode);\n            }\n        }\n        return children;\n    }\n    /**\n     * Get the first child node.\n     * @return The first child or undefined if none exists.\n     */\n    get firstChild() {\n        return this.childNodes[0];\n    }\n    /**\n     * Get the first child node of type {@link HTMLElement}.\n     * @return The first child element or undefined if none exists.\n     */\n    get firstElementChild() {\n        return this.children[0];\n    }\n    /**\n     * Get the last child node.\n     * @return The last child or undefined if none exists.\n     */\n    get lastChild() {\n        return (0, back_1.default)(this.childNodes);\n    }\n    /**\n     * Get the last child node of type {@link HTMLElement}.\n     * @return The last child element or undefined if none exists.\n     */\n    get lastElementChild() {\n        return this.children[this.children.length - 1];\n    }\n    get childElementCount() {\n        return this.children.length;\n    }\n    get classNames() {\n        return this.classList.toString();\n    }\n    /** Clone this Node */\n    clone() {\n        return parse(this.toString(), this._parseOptions).firstChild;\n    }\n}\nexports.default = HTMLElement;\n// #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n// https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\nconst kMarkupPattern = /<!--[\\s\\S]*?-->|<(\\/?)([a-zA-Z][-.:0-9_a-zA-Z@\\xB7\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u03A1\\u03A3-\\u03D9\\u03DB-\\u03EF\\u03F7-\\u03FF\\u0400-\\u04FF\\u0500-\\u052F\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E00-\\u1E9B\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126\\u212A-\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64-\\uAB65\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\x37F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*)((?:\\s+[^>]*?(?:(?:'[^']*')|(?:\"[^\"]*\"))?)*)\\s*(\\/?)>/gu;\n// const kMarkupPattern = /<!--[\\s\\S]*?-->|<(\\/?)([a-zA-Z][-.:0-9_a-zA-Z]*)((?:\\s+[^>]*?(?:(?:'[^']*')|(?:\"[^\"]*\"))?)*)\\s*(\\/?)>/g;\nconst kAttributePattern = /(?:^|\\s)(id|class)\\s*=\\s*((?:'[^']*')|(?:\"[^\"]*\")|\\S+)/gi;\nconst kElementsClosedByOpening = {\n    li: { li: true, LI: true },\n    LI: { li: true, LI: true },\n    p: { p: true, div: true, P: true, DIV: true },\n    P: { p: true, div: true, P: true, DIV: true },\n    b: { div: true, DIV: true },\n    B: { div: true, DIV: true },\n    td: { td: true, th: true, TD: true, TH: true },\n    TD: { td: true, th: true, TD: true, TH: true },\n    th: { td: true, th: true, TD: true, TH: true },\n    TH: { td: true, th: true, TD: true, TH: true },\n    h1: { h1: true, H1: true },\n    H1: { h1: true, H1: true },\n    h2: { h2: true, H2: true },\n    H2: { h2: true, H2: true },\n    h3: { h3: true, H3: true },\n    H3: { h3: true, H3: true },\n    h4: { h4: true, H4: true },\n    H4: { h4: true, H4: true },\n    h5: { h5: true, H5: true },\n    H5: { h5: true, H5: true },\n    h6: { h6: true, H6: true },\n    H6: { h6: true, H6: true },\n};\nconst kElementsClosedByClosing = {\n    li: { ul: true, ol: true, UL: true, OL: true },\n    LI: { ul: true, ol: true, UL: true, OL: true },\n    a: { div: true, DIV: true },\n    A: { div: true, DIV: true },\n    b: { div: true, DIV: true },\n    B: { div: true, DIV: true },\n    i: { div: true, DIV: true },\n    I: { div: true, DIV: true },\n    p: { div: true, DIV: true },\n    P: { div: true, DIV: true },\n    td: { tr: true, table: true, TR: true, TABLE: true },\n    TD: { tr: true, table: true, TR: true, TABLE: true },\n    th: { tr: true, table: true, TR: true, TABLE: true },\n    TH: { tr: true, table: true, TR: true, TABLE: true },\n};\nconst frameflag = 'documentfragmentcontainer';\n/**\n * Parses HTML and returns a root element\n * Parse a chuck of HTML source.\n * @param  {string} data      html\n * @return {HTMLElement}      root element\n */\nfunction base_parse(data, options = {}) {\n    var _a, _b;\n    const voidTag = new void_tag_1.default((_a = options === null || options === void 0 ? void 0 : options.voidTag) === null || _a === void 0 ? void 0 : _a.closingSlash, (_b = options === null || options === void 0 ? void 0 : options.voidTag) === null || _b === void 0 ? void 0 : _b.tags);\n    const elements = options.blockTextElements || {\n        script: true,\n        noscript: true,\n        style: true,\n        pre: true,\n    };\n    const element_names = Object.keys(elements);\n    const kBlockTextElements = element_names.map((it) => new RegExp(`^${it}$`, 'i'));\n    const kIgnoreElements = element_names.filter((it) => Boolean(elements[it])).map((it) => new RegExp(`^${it}$`, 'i'));\n    function element_should_be_ignore(tag) {\n        return kIgnoreElements.some((it) => it.test(tag));\n    }\n    function is_block_text_element(tag) {\n        return kBlockTextElements.some((it) => it.test(tag));\n    }\n    const createRange = (startPos, endPos) => [startPos - frameFlagOffset, endPos - frameFlagOffset];\n    const root = new HTMLElement(null, {}, '', null, [0, data.length], voidTag, options);\n    let currentParent = root;\n    const stack = [root];\n    let lastTextPos = -1;\n    let noNestedTagIndex = undefined;\n    let match;\n    // https://github.com/taoqf/node-html-parser/issues/38\n    data = `<${frameflag}>${data}</${frameflag}>`;\n    const { lowerCaseTagName, fixNestedATags } = options;\n    const dataEndPos = data.length - (frameflag.length + 2);\n    const frameFlagOffset = frameflag.length + 2;\n    while ((match = kMarkupPattern.exec(data))) {\n        // Note: Object destructuring here consistently tests as higher performance than array destructuring\n        // eslint-disable-next-line prefer-const\n        let { 0: matchText, 1: leadingSlash, 2: tagName, 3: attributes, 4: closingSlash } = match;\n        const matchLength = matchText.length;\n        const tagStartPos = kMarkupPattern.lastIndex - matchLength;\n        const tagEndPos = kMarkupPattern.lastIndex;\n        // Add TextNode if content\n        if (lastTextPos > -1) {\n            if (lastTextPos + matchLength < tagEndPos) {\n                const text = data.substring(lastTextPos, tagStartPos);\n                currentParent.appendChild(new text_1.default(text, currentParent, createRange(lastTextPos, tagStartPos)));\n            }\n        }\n        lastTextPos = kMarkupPattern.lastIndex;\n        // https://github.com/taoqf/node-html-parser/issues/38\n        // Skip frameflag node\n        if (tagName === frameflag)\n            continue;\n        // Handle comments\n        if (matchText[1] === '!') {\n            if (options.comment) {\n                // Only keep what is in between <!-- and -->\n                const text = data.substring(tagStartPos + 4, tagEndPos - 3);\n                currentParent.appendChild(new comment_1.default(text, currentParent, createRange(tagStartPos, tagEndPos)));\n            }\n            continue;\n        }\n        /* -- Handle tag matching -- */\n        // Fix tag casing if necessary\n        if (lowerCaseTagName)\n            tagName = tagName.toLowerCase();\n        // Handle opening tags (ie. <this> not </that>)\n        if (!leadingSlash) {\n            /* Populate attributes */\n            const attrs = {};\n            for (let attMatch; (attMatch = kAttributePattern.exec(attributes));) {\n                const { 1: key, 2: val } = attMatch;\n                const isQuoted = val[0] === `'` || val[0] === `\"`;\n                attrs[key.toLowerCase()] = isQuoted ? val.slice(1, val.length - 1) : val;\n            }\n            const parentTagName = currentParent.rawTagName;\n            if (!closingSlash && kElementsClosedByOpening[parentTagName]) {\n                if (kElementsClosedByOpening[parentTagName][tagName]) {\n                    stack.pop();\n                    currentParent = (0, back_1.default)(stack);\n                }\n            }\n            // Prevent nested A tags by terminating the last A and starting a new one : see issue #144\n            if (fixNestedATags && (tagName === 'a' || tagName === 'A')) {\n                if (noNestedTagIndex !== undefined) {\n                    stack.splice(noNestedTagIndex);\n                    currentParent = (0, back_1.default)(stack);\n                }\n                noNestedTagIndex = stack.length;\n            }\n            const tagEndPos = kMarkupPattern.lastIndex;\n            const tagStartPos = tagEndPos - matchLength;\n            currentParent = currentParent.appendChild(\n            // Initialize range (end position updated later for closed tags)\n            new HTMLElement(tagName, attrs, attributes.slice(1), null, createRange(tagStartPos, tagEndPos), voidTag, options));\n            stack.push(currentParent);\n            if (is_block_text_element(tagName)) {\n                // Find closing tag\n                const closeMarkup = `</${tagName}>`;\n                const closeIndex = lowerCaseTagName\n                    ? data.toLocaleLowerCase().indexOf(closeMarkup, kMarkupPattern.lastIndex)\n                    : data.indexOf(closeMarkup, kMarkupPattern.lastIndex);\n                const textEndPos = closeIndex === -1 ? dataEndPos : closeIndex;\n                if (element_should_be_ignore(tagName)) {\n                    const text = data.substring(tagEndPos, textEndPos);\n                    if (text.length > 0 && /\\S/.test(text)) {\n                        currentParent.appendChild(new text_1.default(text, currentParent, createRange(tagEndPos, textEndPos)));\n                    }\n                }\n                if (closeIndex === -1) {\n                    lastTextPos = kMarkupPattern.lastIndex = data.length + 1;\n                }\n                else {\n                    lastTextPos = kMarkupPattern.lastIndex = closeIndex + closeMarkup.length;\n                    // Cause to be treated as self-closing, because no close found\n                    leadingSlash = '/';\n                }\n            }\n        }\n        // Handle closing tags or self-closed elements (ie </tag> or <br>)\n        if (leadingSlash || closingSlash || voidTag.isVoidElement(tagName)) {\n            while (true) {\n                if (noNestedTagIndex != null && (tagName === 'a' || tagName === 'A'))\n                    noNestedTagIndex = undefined;\n                if (currentParent.rawTagName === tagName) {\n                    // Update range end for closed tag\n                    currentParent.range[1] = createRange(-1, Math.max(lastTextPos, tagEndPos))[1];\n                    stack.pop();\n                    currentParent = (0, back_1.default)(stack);\n                    break;\n                }\n                else {\n                    const parentTagName = currentParent.tagName;\n                    // Trying to close current tag, and move on\n                    if (kElementsClosedByClosing[parentTagName]) {\n                        if (kElementsClosedByClosing[parentTagName][tagName]) {\n                            stack.pop();\n                            currentParent = (0, back_1.default)(stack);\n                            continue;\n                        }\n                    }\n                    // Use aggressive strategy to handle unmatching markups.\n                    break;\n                }\n            }\n        }\n    }\n    return stack;\n}\nexports.base_parse = base_parse;\n/**\n * Parses HTML and returns a root element\n * Parse a chuck of HTML source.\n */\nfunction parse(data, options = {}) {\n    const stack = base_parse(data, options);\n    const [root] = stack;\n    while (stack.length > 1) {\n        // Handle each error elements.\n        const last = stack.pop();\n        const oneBefore = (0, back_1.default)(stack);\n        if (last.parentNode && last.parentNode.parentNode) {\n            if (last.parentNode === oneBefore && last.tagName === oneBefore.tagName) {\n                // Pair error case <h3> <h3> handle : Fixes to <h3> </h3>\n                // this is wrong, becouse this will put the H3 outside the current right position which should be inside the current Html Element, see issue 152 for more info\n                if (options.parseNoneClosedTags !== true) {\n                    oneBefore.removeChild(last);\n                    last.childNodes.forEach((child) => {\n                        oneBefore.parentNode.appendChild(child);\n                    });\n                    stack.pop();\n                }\n            }\n            else {\n                // Single error  <div> <h3> </div> handle: Just removes <h3>\n                // Why remove? this is already a HtmlElement and the missing <H3> is already added in this case. see issue 152 for more info\n                // eslint-disable-next-line no-lonely-if\n                if (options.parseNoneClosedTags !== true) {\n                    oneBefore.removeChild(last);\n                    last.childNodes.forEach((child) => {\n                        oneBefore.appendChild(child);\n                    });\n                }\n            }\n        }\n        else {\n            // If it's final element just skip.\n        }\n    }\n    // response.childNodes.forEach((node) => {\n    // \tif (node instanceof HTMLElement) {\n    // \t\tnode.parentNode = null;\n    // \t}\n    // });\n    return root;\n}\nexports.parse = parse;\n/**\n * Resolves a list of {@link NodeInsertable} to a list of nodes,\n * and removes nodes from any potential parent.\n */\nfunction resolveInsertable(insertable) {\n    return insertable.map((val) => {\n        if (typeof val === 'string') {\n            return new text_1.default(val);\n        }\n        val.remove();\n        return val;\n    });\n}\nfunction resetParent(nodes, parent) {\n    return nodes.map((node) => {\n        node.parentNode = parent;\n        return node;\n    });\n}\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction arr_back(arr) {\n    return arr[arr.length - 1];\n}\nexports.default = arr_back;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst type_1 = __importDefault(require(\"./nodes/type\"));\nfunction isTag(node) {\n    return node && node.nodeType === type_1.default.ELEMENT_NODE;\n}\nfunction getAttributeValue(elem, name) {\n    return isTag(elem) ? elem.getAttribute(name) : undefined;\n}\nfunction getName(elem) {\n    return ((elem && elem.rawTagName) || '').toLowerCase();\n}\nfunction getChildren(node) {\n    return node && node.childNodes;\n}\nfunction getParent(node) {\n    return node ? node.parentNode : null;\n}\nfunction getText(node) {\n    return node.text;\n}\nfunction removeSubsets(nodes) {\n    let idx = nodes.length;\n    let node;\n    let ancestor;\n    let replace;\n    // Check if each node (or one of its ancestors) is already contained in the\n    // array.\n    while (--idx > -1) {\n        node = ancestor = nodes[idx];\n        // Temporarily remove the node under consideration\n        nodes[idx] = null;\n        replace = true;\n        while (ancestor) {\n            if (nodes.indexOf(ancestor) > -1) {\n                replace = false;\n                nodes.splice(idx, 1);\n                break;\n            }\n            ancestor = getParent(ancestor);\n        }\n        // If the node has been found to be unique, re-insert it.\n        if (replace) {\n            nodes[idx] = node;\n        }\n    }\n    return nodes;\n}\nfunction existsOne(test, elems) {\n    return elems.some((elem) => {\n        return isTag(elem) ? test(elem) || existsOne(test, getChildren(elem)) : false;\n    });\n}\nfunction getSiblings(node) {\n    const parent = getParent(node);\n    return parent ? getChildren(parent) : [];\n}\nfunction hasAttrib(elem, name) {\n    return getAttributeValue(elem, name) !== undefined;\n}\nfunction findOne(test, elems) {\n    let elem = null;\n    for (let i = 0, l = elems === null || elems === void 0 ? void 0 : elems.length; i < l && !elem; i++) {\n        const el = elems[i];\n        if (test(el)) {\n            elem = el;\n        }\n        else {\n            const childs = getChildren(el);\n            if (childs && childs.length > 0) {\n                elem = findOne(test, childs);\n            }\n        }\n    }\n    return elem;\n}\nfunction findAll(test, nodes) {\n    let result = [];\n    for (let i = 0, j = nodes.length; i < j; i++) {\n        if (!isTag(nodes[i]))\n            continue;\n        if (test(nodes[i]))\n            result.push(nodes[i]);\n        const childs = getChildren(nodes[i]);\n        if (childs)\n            result = result.concat(findAll(test, childs));\n    }\n    return result;\n}\nexports.default = {\n    isTag,\n    getAttributeValue,\n    getName,\n    getChildren,\n    getParent,\n    getText,\n    removeSubsets,\n    existsOne,\n    getSiblings,\n    hasAttrib,\n    findOne,\n    findAll\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass VoidTag {\n    constructor(addClosingSlash = false, tags) {\n        this.addClosingSlash = addClosingSlash;\n        if (Array.isArray(tags)) {\n            this.voidTags = tags.reduce((set, tag) => {\n                return set.add(tag.toLowerCase()).add(tag.toUpperCase()).add(tag);\n            }, new Set());\n        }\n        else {\n            this.voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr'].reduce((set, tag) => {\n                return set.add(tag.toLowerCase()).add(tag.toUpperCase()).add(tag);\n            }, new Set());\n        }\n    }\n    formatNode(tag, attrs, innerHTML) {\n        const addClosingSlash = this.addClosingSlash;\n        const closingSpace = (addClosingSlash && attrs && !attrs.endsWith(' ')) ? ' ' : '';\n        const closingSlash = addClosingSlash ? `${closingSpace}/` : '';\n        return this.isVoidElement(tag.toLowerCase()) ? `<${tag}${attrs}${closingSlash}>` : `<${tag}${attrs}>${innerHTML}</${tag}>`;\n    }\n    isVoidElement(tag) {\n        return this.voidTags.has(tag);\n    }\n}\nexports.default = VoidTag;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst he_1 = require(\"he\");\nconst node_1 = __importDefault(require(\"./node\"));\nconst type_1 = __importDefault(require(\"./type\"));\n/**\n * TextNode to contain a text element in DOM tree.\n * @param {string} value [description]\n */\nclass TextNode extends node_1.default {\n    clone() {\n        return new TextNode(this._rawText, null);\n    }\n    constructor(rawText, parentNode = null, range) {\n        super(parentNode, range);\n        /**\n         * Node Type declaration.\n         * @type {Number}\n         */\n        this.nodeType = type_1.default.TEXT_NODE;\n        this.rawTagName = '';\n        this._rawText = rawText;\n    }\n    get rawText() {\n        return this._rawText;\n    }\n    /**\n     * Set rawText and invalidate trimmed caches\n     */\n    set rawText(text) {\n        this._rawText = text;\n        this._trimmedRawText = void 0;\n        this._trimmedText = void 0;\n    }\n    /**\n     * Returns raw text with all whitespace trimmed except single leading/trailing non-breaking space\n     */\n    get trimmedRawText() {\n        if (this._trimmedRawText !== undefined)\n            return this._trimmedRawText;\n        this._trimmedRawText = trimText(this.rawText);\n        return this._trimmedRawText;\n    }\n    /**\n     * Returns text with all whitespace trimmed except single leading/trailing non-breaking space\n     */\n    get trimmedText() {\n        if (this._trimmedText !== undefined)\n            return this._trimmedText;\n        this._trimmedText = trimText(this.text);\n        return this._trimmedText;\n    }\n    /**\n     * Get unescaped text value of current node and its children.\n     * @return {string} text content\n     */\n    get text() {\n        return (0, he_1.decode)(this.rawText);\n    }\n    /**\n     * Detect if the node contains only white space.\n     * @return {boolean}\n     */\n    get isWhitespace() {\n        return /^(\\s|&nbsp;)*$/.test(this.rawText);\n    }\n    toString() {\n        return this.rawText;\n    }\n}\nexports.default = TextNode;\n/**\n * Trim whitespace except single leading/trailing non-breaking space\n */\nfunction trimText(text) {\n    let i = 0;\n    let startPos;\n    let endPos;\n    while (i >= 0 && i < text.length) {\n        if (/\\S/.test(text[i])) {\n            if (startPos === undefined) {\n                startPos = i;\n                i = text.length;\n            }\n            else {\n                endPos = i;\n                i = void 0;\n            }\n        }\n        if (startPos === undefined)\n            i++;\n        else\n            i--;\n    }\n    if (startPos === undefined)\n        startPos = 0;\n    if (endPos === undefined)\n        endPos = text.length - 1;\n    const hasLeadingSpace = startPos > 0 && /[^\\S\\r\\n]/.test(text[startPos - 1]);\n    const hasTrailingSpace = endPos < (text.length - 1) && /[^\\S\\r\\n]/.test(text[endPos + 1]);\n    return (hasLeadingSpace ? ' ' : '') + text.slice(startPos, endPos + 1) + (hasTrailingSpace ? ' ' : '');\n}\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = void 0;\nvar html_1 = require(\"./nodes/html\");\nObject.defineProperty(exports, \"default\", { enumerable: true, get: function () { return html_1.parse; } });\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst html_1 = require(\"./nodes/html\");\n/**\n * Parses HTML and returns a root element\n * Parse a chuck of HTML source.\n */\nfunction valid(data, options = {}) {\n    const stack = (0, html_1.base_parse)(data, options);\n    return Boolean(stack.length === 1);\n}\nexports.default = valid;\n"]}