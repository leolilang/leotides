{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\r\n/** Types of elements found in htmlparser2's DOM */\r\nvar ElementType;\r\n(function (ElementType) {\r\n    /** Type for the root element of a document */\r\n    ElementType[\"Root\"] = \"root\";\r\n    /** Type for Text */\r\n    ElementType[\"Text\"] = \"text\";\r\n    /** Type for <? ... ?> */\r\n    ElementType[\"Directive\"] = \"directive\";\r\n    /** Type for <!-- ... --> */\r\n    ElementType[\"Comment\"] = \"comment\";\r\n    /** Type for <script> tags */\r\n    ElementType[\"Script\"] = \"script\";\r\n    /** Type for <style> tags */\r\n    ElementType[\"Style\"] = \"style\";\r\n    /** Type for Any tag */\r\n    ElementType[\"Tag\"] = \"tag\";\r\n    /** Type for <![CDATA[ ... ]]> */\r\n    ElementType[\"CDATA\"] = \"cdata\";\r\n    /** Type for <!doctype ...> */\r\n    ElementType[\"Doctype\"] = \"doctype\";\r\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\r\n/**\r\n * Tests whether an element is a tag or not.\r\n *\r\n * @param elem Element to test\r\n */\r\nfunction isTag(elem) {\r\n    return (elem.type === ElementType.Tag ||\r\n        elem.type === ElementType.Script ||\r\n        elem.type === ElementType.Style);\r\n}\r\nexports.isTag = isTag;\r\n// Exports for backwards compatibility\r\n/** Type for the root element of a document */\r\nexports.Root = ElementType.Root;\r\n/** Type for Text */\r\nexports.Text = ElementType.Text;\r\n/** Type for <? ... ?> */\r\nexports.Directive = ElementType.Directive;\r\n/** Type for <!-- ... --> */\r\nexports.Comment = ElementType.Comment;\r\n/** Type for <script> tags */\r\nexports.Script = ElementType.Script;\r\n/** Type for <style> tags */\r\nexports.Style = ElementType.Style;\r\n/** Type for Any tag */\r\nexports.Tag = ElementType.Tag;\r\n/** Type for <![CDATA[ ... ]]> */\r\nexports.CDATA = ElementType.CDATA;\r\n/** Type for <!doctype ...> */\r\nexports.Doctype = ElementType.Doctype;\r\n"]}