{"version":3,"sources":["index.js","foreignNames.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.render = void 0;\r\n/*\r\n * Module dependencies\r\n */\r\nvar ElementType = __importStar(require(\"domelementtype\"));\r\nvar entities_1 = require(\"entities\");\r\n/**\r\n * Mixed-case SVG and MathML tags & attributes\r\n * recognized by the HTML parser.\r\n *\r\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\r\n */\r\nvar foreignNames_js_1 = require(\"./foreignNames.js\");\r\nvar unencodedElements = new Set([\r\n    \"style\",\r\n    \"script\",\r\n    \"xmp\",\r\n    \"iframe\",\r\n    \"noembed\",\r\n    \"noframes\",\r\n    \"plaintext\",\r\n    \"noscript\",\r\n]);\r\nfunction replaceQuotes(value) {\r\n    return value.replace(/\"/g, \"&quot;\");\r\n}\r\n/**\r\n * Format attributes\r\n */\r\nfunction formatAttributes(attributes, opts) {\r\n    var _a;\r\n    if (!attributes)\r\n        return;\r\n    var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false\r\n        ? replaceQuotes\r\n        : opts.xmlMode || opts.encodeEntities !== \"utf8\"\r\n            ? entities_1.encodeXML\r\n            : entities_1.escapeAttribute;\r\n    return Object.keys(attributes)\r\n        .map(function (key) {\r\n        var _a, _b;\r\n        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\r\n        if (opts.xmlMode === \"foreign\") {\r\n            /* Fix up mixed-case attribute names */\r\n            key = (_b = foreignNames_js_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\r\n        }\r\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\r\n            return key;\r\n        }\r\n        return \"\".concat(key, \"=\\\"\").concat(encode(value), \"\\\"\");\r\n    })\r\n        .join(\" \");\r\n}\r\n/**\r\n * Self-enclosing tags\r\n */\r\nvar singleTag = new Set([\r\n    \"area\",\r\n    \"base\",\r\n    \"basefont\",\r\n    \"br\",\r\n    \"col\",\r\n    \"command\",\r\n    \"embed\",\r\n    \"frame\",\r\n    \"hr\",\r\n    \"img\",\r\n    \"input\",\r\n    \"isindex\",\r\n    \"keygen\",\r\n    \"link\",\r\n    \"meta\",\r\n    \"param\",\r\n    \"source\",\r\n    \"track\",\r\n    \"wbr\",\r\n]);\r\n/**\r\n * Renders a DOM node or an array of DOM nodes to a string.\r\n *\r\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\r\n *\r\n * @param node Node to be rendered.\r\n * @param options Changes serialization behavior\r\n */\r\nfunction render(node, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var nodes = \"length\" in node ? node : [node];\r\n    var output = \"\";\r\n    for (var i = 0; i < nodes.length; i++) {\r\n        output += renderNode(nodes[i], options);\r\n    }\r\n    return output;\r\n}\r\nexports.render = render;\r\nexports.default = render;\r\nfunction renderNode(node, options) {\r\n    switch (node.type) {\r\n        case ElementType.Root:\r\n            return render(node.children, options);\r\n        // @ts-expect-error We don't use `Doctype` yet\r\n        case ElementType.Doctype:\r\n        case ElementType.Directive:\r\n            return renderDirective(node);\r\n        case ElementType.Comment:\r\n            return renderComment(node);\r\n        case ElementType.CDATA:\r\n            return renderCdata(node);\r\n        case ElementType.Script:\r\n        case ElementType.Style:\r\n        case ElementType.Tag:\r\n            return renderTag(node, options);\r\n        case ElementType.Text:\r\n            return renderText(node, options);\r\n    }\r\n}\r\nvar foreignModeIntegrationPoints = new Set([\r\n    \"mi\",\r\n    \"mo\",\r\n    \"mn\",\r\n    \"ms\",\r\n    \"mtext\",\r\n    \"annotation-xml\",\r\n    \"foreignObject\",\r\n    \"desc\",\r\n    \"title\",\r\n]);\r\nvar foreignElements = new Set([\"svg\", \"math\"]);\r\nfunction renderTag(elem, opts) {\r\n    var _a;\r\n    // Handle SVG / MathML in HTML\r\n    if (opts.xmlMode === \"foreign\") {\r\n        /* Fix up mixed-case element names */\r\n        elem.name = (_a = foreignNames_js_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\r\n        /* Exit foreign mode at integration points */\r\n        if (elem.parent &&\r\n            foreignModeIntegrationPoints.has(elem.parent.name)) {\r\n            opts = __assign(__assign({}, opts), { xmlMode: false });\r\n        }\r\n    }\r\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\r\n        opts = __assign(__assign({}, opts), { xmlMode: \"foreign\" });\r\n    }\r\n    var tag = \"<\".concat(elem.name);\r\n    var attribs = formatAttributes(elem.attribs, opts);\r\n    if (attribs) {\r\n        tag += \" \".concat(attribs);\r\n    }\r\n    if (elem.children.length === 0 &&\r\n        (opts.xmlMode\r\n            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\r\n                opts.selfClosingTags !== false\r\n            : // User explicitly asked for self-closing tags, even in HTML mode\r\n                opts.selfClosingTags && singleTag.has(elem.name))) {\r\n        if (!opts.xmlMode)\r\n            tag += \" \";\r\n        tag += \"/>\";\r\n    }\r\n    else {\r\n        tag += \">\";\r\n        if (elem.children.length > 0) {\r\n            tag += render(elem.children, opts);\r\n        }\r\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\r\n            tag += \"</\".concat(elem.name, \">\");\r\n        }\r\n    }\r\n    return tag;\r\n}\r\nfunction renderDirective(elem) {\r\n    return \"<\".concat(elem.data, \">\");\r\n}\r\nfunction renderText(elem, opts) {\r\n    var _a;\r\n    var data = elem.data || \"\";\r\n    // If entities weren't decoded, no need to encode them back\r\n    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false &&\r\n        !(!opts.xmlMode &&\r\n            elem.parent &&\r\n            unencodedElements.has(elem.parent.name))) {\r\n        data =\r\n            opts.xmlMode || opts.encodeEntities !== \"utf8\"\r\n                ? (0, entities_1.encodeXML)(data)\r\n                : (0, entities_1.escapeText)(data);\r\n    }\r\n    return data;\r\n}\r\nfunction renderCdata(elem) {\r\n    return \"<![CDATA[\".concat(elem.children[0].data, \"]]>\");\r\n}\r\nfunction renderComment(elem) {\r\n    return \"<!--\".concat(elem.data, \"-->\");\r\n}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.attributeNames = exports.elementNames = void 0;\r\nexports.elementNames = new Map([\r\n    \"altGlyph\",\r\n    \"altGlyphDef\",\r\n    \"altGlyphItem\",\r\n    \"animateColor\",\r\n    \"animateMotion\",\r\n    \"animateTransform\",\r\n    \"clipPath\",\r\n    \"feBlend\",\r\n    \"feColorMatrix\",\r\n    \"feComponentTransfer\",\r\n    \"feComposite\",\r\n    \"feConvolveMatrix\",\r\n    \"feDiffuseLighting\",\r\n    \"feDisplacementMap\",\r\n    \"feDistantLight\",\r\n    \"feDropShadow\",\r\n    \"feFlood\",\r\n    \"feFuncA\",\r\n    \"feFuncB\",\r\n    \"feFuncG\",\r\n    \"feFuncR\",\r\n    \"feGaussianBlur\",\r\n    \"feImage\",\r\n    \"feMerge\",\r\n    \"feMergeNode\",\r\n    \"feMorphology\",\r\n    \"feOffset\",\r\n    \"fePointLight\",\r\n    \"feSpecularLighting\",\r\n    \"feSpotLight\",\r\n    \"feTile\",\r\n    \"feTurbulence\",\r\n    \"foreignObject\",\r\n    \"glyphRef\",\r\n    \"linearGradient\",\r\n    \"radialGradient\",\r\n    \"textPath\",\r\n].map(function (val) { return [val.toLowerCase(), val]; }));\r\nexports.attributeNames = new Map([\r\n    \"definitionURL\",\r\n    \"attributeName\",\r\n    \"attributeType\",\r\n    \"baseFrequency\",\r\n    \"baseProfile\",\r\n    \"calcMode\",\r\n    \"clipPathUnits\",\r\n    \"diffuseConstant\",\r\n    \"edgeMode\",\r\n    \"filterUnits\",\r\n    \"glyphRef\",\r\n    \"gradientTransform\",\r\n    \"gradientUnits\",\r\n    \"kernelMatrix\",\r\n    \"kernelUnitLength\",\r\n    \"keyPoints\",\r\n    \"keySplines\",\r\n    \"keyTimes\",\r\n    \"lengthAdjust\",\r\n    \"limitingConeAngle\",\r\n    \"markerHeight\",\r\n    \"markerUnits\",\r\n    \"markerWidth\",\r\n    \"maskContentUnits\",\r\n    \"maskUnits\",\r\n    \"numOctaves\",\r\n    \"pathLength\",\r\n    \"patternContentUnits\",\r\n    \"patternTransform\",\r\n    \"patternUnits\",\r\n    \"pointsAtX\",\r\n    \"pointsAtY\",\r\n    \"pointsAtZ\",\r\n    \"preserveAlpha\",\r\n    \"preserveAspectRatio\",\r\n    \"primitiveUnits\",\r\n    \"refX\",\r\n    \"refY\",\r\n    \"repeatCount\",\r\n    \"repeatDur\",\r\n    \"requiredExtensions\",\r\n    \"requiredFeatures\",\r\n    \"specularConstant\",\r\n    \"specularExponent\",\r\n    \"spreadMethod\",\r\n    \"startOffset\",\r\n    \"stdDeviation\",\r\n    \"stitchTiles\",\r\n    \"surfaceScale\",\r\n    \"systemLanguage\",\r\n    \"tableValues\",\r\n    \"targetX\",\r\n    \"targetY\",\r\n    \"textLength\",\r\n    \"viewBox\",\r\n    \"viewTarget\",\r\n    \"xChannelSelector\",\r\n    \"yChannelSelector\",\r\n    \"zoomAndPan\",\r\n].map(function (val) { return [val.toLowerCase(), val]; }));\r\n"]}