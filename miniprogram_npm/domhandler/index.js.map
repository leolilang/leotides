{"version":3,"sources":["index.js","node.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DomHandler = void 0;\r\nvar domelementtype_1 = require(\"domelementtype\");\r\nvar node_js_1 = require(\"./node.js\");\r\n__exportStar(require(\"./node.js\"), exports);\r\n// Default options\r\nvar defaultOpts = {\r\n    withStartIndices: false,\r\n    withEndIndices: false,\r\n    xmlMode: false,\r\n};\r\nvar DomHandler = /** @class */ (function () {\r\n    /**\r\n     * @param callback Called once parsing has completed.\r\n     * @param options Settings for the handler.\r\n     * @param elementCB Callback whenever a tag is closed.\r\n     */\r\n    function DomHandler(callback, options, elementCB) {\r\n        /** The elements of the DOM */\r\n        this.dom = [];\r\n        /** The root element for the DOM */\r\n        this.root = new node_js_1.Document(this.dom);\r\n        /** Indicated whether parsing has been completed. */\r\n        this.done = false;\r\n        /** Stack of open tags. */\r\n        this.tagStack = [this.root];\r\n        /** A data node that is still being written to. */\r\n        this.lastNode = null;\r\n        /** Reference to the parser instance. Used for location information. */\r\n        this.parser = null;\r\n        // Make it possible to skip arguments, for backwards-compatibility\r\n        if (typeof options === \"function\") {\r\n            elementCB = options;\r\n            options = defaultOpts;\r\n        }\r\n        if (typeof callback === \"object\") {\r\n            options = callback;\r\n            callback = undefined;\r\n        }\r\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\r\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\r\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\r\n    }\r\n    DomHandler.prototype.onparserinit = function (parser) {\r\n        this.parser = parser;\r\n    };\r\n    // Resets the handler back to starting state\r\n    DomHandler.prototype.onreset = function () {\r\n        this.dom = [];\r\n        this.root = new node_js_1.Document(this.dom);\r\n        this.done = false;\r\n        this.tagStack = [this.root];\r\n        this.lastNode = null;\r\n        this.parser = null;\r\n    };\r\n    // Signals the handler that parsing is done\r\n    DomHandler.prototype.onend = function () {\r\n        if (this.done)\r\n            return;\r\n        this.done = true;\r\n        this.parser = null;\r\n        this.handleCallback(null);\r\n    };\r\n    DomHandler.prototype.onerror = function (error) {\r\n        this.handleCallback(error);\r\n    };\r\n    DomHandler.prototype.onclosetag = function () {\r\n        this.lastNode = null;\r\n        var elem = this.tagStack.pop();\r\n        if (this.options.withEndIndices) {\r\n            elem.endIndex = this.parser.endIndex;\r\n        }\r\n        if (this.elementCB)\r\n            this.elementCB(elem);\r\n    };\r\n    DomHandler.prototype.onopentag = function (name, attribs) {\r\n        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;\r\n        var element = new node_js_1.Element(name, attribs, undefined, type);\r\n        this.addNode(element);\r\n        this.tagStack.push(element);\r\n    };\r\n    DomHandler.prototype.ontext = function (data) {\r\n        var lastNode = this.lastNode;\r\n        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {\r\n            lastNode.data += data;\r\n            if (this.options.withEndIndices) {\r\n                lastNode.endIndex = this.parser.endIndex;\r\n            }\r\n        }\r\n        else {\r\n            var node = new node_js_1.Text(data);\r\n            this.addNode(node);\r\n            this.lastNode = node;\r\n        }\r\n    };\r\n    DomHandler.prototype.oncomment = function (data) {\r\n        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {\r\n            this.lastNode.data += data;\r\n            return;\r\n        }\r\n        var node = new node_js_1.Comment(data);\r\n        this.addNode(node);\r\n        this.lastNode = node;\r\n    };\r\n    DomHandler.prototype.oncommentend = function () {\r\n        this.lastNode = null;\r\n    };\r\n    DomHandler.prototype.oncdatastart = function () {\r\n        var text = new node_js_1.Text(\"\");\r\n        var node = new node_js_1.CDATA([text]);\r\n        this.addNode(node);\r\n        text.parent = node;\r\n        this.lastNode = text;\r\n    };\r\n    DomHandler.prototype.oncdataend = function () {\r\n        this.lastNode = null;\r\n    };\r\n    DomHandler.prototype.onprocessinginstruction = function (name, data) {\r\n        var node = new node_js_1.ProcessingInstruction(name, data);\r\n        this.addNode(node);\r\n    };\r\n    DomHandler.prototype.handleCallback = function (error) {\r\n        if (typeof this.callback === \"function\") {\r\n            this.callback(error, this.dom);\r\n        }\r\n        else if (error) {\r\n            throw error;\r\n        }\r\n    };\r\n    DomHandler.prototype.addNode = function (node) {\r\n        var parent = this.tagStack[this.tagStack.length - 1];\r\n        var previousSibling = parent.children[parent.children.length - 1];\r\n        if (this.options.withStartIndices) {\r\n            node.startIndex = this.parser.startIndex;\r\n        }\r\n        if (this.options.withEndIndices) {\r\n            node.endIndex = this.parser.endIndex;\r\n        }\r\n        parent.children.push(node);\r\n        if (previousSibling) {\r\n            node.prev = previousSibling;\r\n            previousSibling.next = node;\r\n        }\r\n        node.parent = parent;\r\n        this.lastNode = null;\r\n    };\r\n    return DomHandler;\r\n}());\r\nexports.DomHandler = DomHandler;\r\nexports.default = DomHandler;\r\n","\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\r\nvar domelementtype_1 = require(\"domelementtype\");\r\n/**\r\n * This object will be used as the prototype for Nodes when creating a\r\n * DOM-Level-1-compliant structure.\r\n */\r\nvar Node = /** @class */ (function () {\r\n    function Node() {\r\n        /** Parent of the node */\r\n        this.parent = null;\r\n        /** Previous sibling */\r\n        this.prev = null;\r\n        /** Next sibling */\r\n        this.next = null;\r\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */\r\n        this.startIndex = null;\r\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */\r\n        this.endIndex = null;\r\n    }\r\n    Object.defineProperty(Node.prototype, \"parentNode\", {\r\n        // Read-write aliases for properties\r\n        /**\r\n         * Same as {@link parent}.\r\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\r\n         */\r\n        get: function () {\r\n            return this.parent;\r\n        },\r\n        set: function (parent) {\r\n            this.parent = parent;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Node.prototype, \"previousSibling\", {\r\n        /**\r\n         * Same as {@link prev}.\r\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\r\n         */\r\n        get: function () {\r\n            return this.prev;\r\n        },\r\n        set: function (prev) {\r\n            this.prev = prev;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Node.prototype, \"nextSibling\", {\r\n        /**\r\n         * Same as {@link next}.\r\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\r\n         */\r\n        get: function () {\r\n            return this.next;\r\n        },\r\n        set: function (next) {\r\n            this.next = next;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Clone this node, and optionally its children.\r\n     *\r\n     * @param recursive Clone child nodes as well.\r\n     * @returns A clone of the node.\r\n     */\r\n    Node.prototype.cloneNode = function (recursive) {\r\n        if (recursive === void 0) { recursive = false; }\r\n        return cloneNode(this, recursive);\r\n    };\r\n    return Node;\r\n}());\r\nexports.Node = Node;\r\n/**\r\n * A node that contains some data.\r\n */\r\nvar DataNode = /** @class */ (function (_super) {\r\n    __extends(DataNode, _super);\r\n    /**\r\n     * @param data The content of the data node\r\n     */\r\n    function DataNode(data) {\r\n        var _this = _super.call(this) || this;\r\n        _this.data = data;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DataNode.prototype, \"nodeValue\", {\r\n        /**\r\n         * Same as {@link data}.\r\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\r\n         */\r\n        get: function () {\r\n            return this.data;\r\n        },\r\n        set: function (data) {\r\n            this.data = data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return DataNode;\r\n}(Node));\r\nexports.DataNode = DataNode;\r\n/**\r\n * Text within the document.\r\n */\r\nvar Text = /** @class */ (function (_super) {\r\n    __extends(Text, _super);\r\n    function Text() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = domelementtype_1.ElementType.Text;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Text.prototype, \"nodeType\", {\r\n        get: function () {\r\n            return 3;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Text;\r\n}(DataNode));\r\nexports.Text = Text;\r\n/**\r\n * Comments within the document.\r\n */\r\nvar Comment = /** @class */ (function (_super) {\r\n    __extends(Comment, _super);\r\n    function Comment() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = domelementtype_1.ElementType.Comment;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Comment.prototype, \"nodeType\", {\r\n        get: function () {\r\n            return 8;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Comment;\r\n}(DataNode));\r\nexports.Comment = Comment;\r\n/**\r\n * Processing instructions, including doc types.\r\n */\r\nvar ProcessingInstruction = /** @class */ (function (_super) {\r\n    __extends(ProcessingInstruction, _super);\r\n    function ProcessingInstruction(name, data) {\r\n        var _this = _super.call(this, data) || this;\r\n        _this.name = name;\r\n        _this.type = domelementtype_1.ElementType.Directive;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ProcessingInstruction.prototype, \"nodeType\", {\r\n        get: function () {\r\n            return 1;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return ProcessingInstruction;\r\n}(DataNode));\r\nexports.ProcessingInstruction = ProcessingInstruction;\r\n/**\r\n * A `Node` that can have children.\r\n */\r\nvar NodeWithChildren = /** @class */ (function (_super) {\r\n    __extends(NodeWithChildren, _super);\r\n    /**\r\n     * @param children Children of the node. Only certain node types can have children.\r\n     */\r\n    function NodeWithChildren(children) {\r\n        var _this = _super.call(this) || this;\r\n        _this.children = children;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NodeWithChildren.prototype, \"firstChild\", {\r\n        // Aliases\r\n        /** First child of the node. */\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NodeWithChildren.prototype, \"lastChild\", {\r\n        /** Last child of the node. */\r\n        get: function () {\r\n            return this.children.length > 0\r\n                ? this.children[this.children.length - 1]\r\n                : null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NodeWithChildren.prototype, \"childNodes\", {\r\n        /**\r\n         * Same as {@link children}.\r\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\r\n         */\r\n        get: function () {\r\n            return this.children;\r\n        },\r\n        set: function (children) {\r\n            this.children = children;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return NodeWithChildren;\r\n}(Node));\r\nexports.NodeWithChildren = NodeWithChildren;\r\nvar CDATA = /** @class */ (function (_super) {\r\n    __extends(CDATA, _super);\r\n    function CDATA() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = domelementtype_1.ElementType.CDATA;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CDATA.prototype, \"nodeType\", {\r\n        get: function () {\r\n            return 4;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return CDATA;\r\n}(NodeWithChildren));\r\nexports.CDATA = CDATA;\r\n/**\r\n * The root node of the document.\r\n */\r\nvar Document = /** @class */ (function (_super) {\r\n    __extends(Document, _super);\r\n    function Document() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = domelementtype_1.ElementType.Root;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Document.prototype, \"nodeType\", {\r\n        get: function () {\r\n            return 9;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Document;\r\n}(NodeWithChildren));\r\nexports.Document = Document;\r\n/**\r\n * An element within the DOM.\r\n */\r\nvar Element = /** @class */ (function (_super) {\r\n    __extends(Element, _super);\r\n    /**\r\n     * @param name Name of the tag, eg. `div`, `span`.\r\n     * @param attribs Object mapping attribute names to attribute values.\r\n     * @param children Children of the node.\r\n     */\r\n    function Element(name, attribs, children, type) {\r\n        if (children === void 0) { children = []; }\r\n        if (type === void 0) { type = name === \"script\"\r\n            ? domelementtype_1.ElementType.Script\r\n            : name === \"style\"\r\n                ? domelementtype_1.ElementType.Style\r\n                : domelementtype_1.ElementType.Tag; }\r\n        var _this = _super.call(this, children) || this;\r\n        _this.name = name;\r\n        _this.attribs = attribs;\r\n        _this.type = type;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Element.prototype, \"nodeType\", {\r\n        get: function () {\r\n            return 1;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Element.prototype, \"tagName\", {\r\n        // DOM Level 1 aliases\r\n        /**\r\n         * Same as {@link name}.\r\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\r\n         */\r\n        get: function () {\r\n            return this.name;\r\n        },\r\n        set: function (name) {\r\n            this.name = name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Element.prototype, \"attributes\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return Object.keys(this.attribs).map(function (name) {\r\n                var _a, _b;\r\n                return ({\r\n                    name: name,\r\n                    value: _this.attribs[name],\r\n                    namespace: (_a = _this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\r\n                    prefix: (_b = _this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name],\r\n                });\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Element;\r\n}(NodeWithChildren));\r\nexports.Element = Element;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node is a `Element`, `false` otherwise.\r\n */\r\nfunction isTag(node) {\r\n    return (0, domelementtype_1.isTag)(node);\r\n}\r\nexports.isTag = isTag;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\r\n */\r\nfunction isCDATA(node) {\r\n    return node.type === domelementtype_1.ElementType.CDATA;\r\n}\r\nexports.isCDATA = isCDATA;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node has the type `Text`, `false` otherwise.\r\n */\r\nfunction isText(node) {\r\n    return node.type === domelementtype_1.ElementType.Text;\r\n}\r\nexports.isText = isText;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\r\n */\r\nfunction isComment(node) {\r\n    return node.type === domelementtype_1.ElementType.Comment;\r\n}\r\nexports.isComment = isComment;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\r\n */\r\nfunction isDirective(node) {\r\n    return node.type === domelementtype_1.ElementType.Directive;\r\n}\r\nexports.isDirective = isDirective;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\r\n */\r\nfunction isDocument(node) {\r\n    return node.type === domelementtype_1.ElementType.Root;\r\n}\r\nexports.isDocument = isDocument;\r\n/**\r\n * @param node Node to check.\r\n * @returns `true` if the node has children, `false` otherwise.\r\n */\r\nfunction hasChildren(node) {\r\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\r\n}\r\nexports.hasChildren = hasChildren;\r\n/**\r\n * Clone a node, and optionally its children.\r\n *\r\n * @param recursive Clone child nodes as well.\r\n * @returns A clone of the node.\r\n */\r\nfunction cloneNode(node, recursive) {\r\n    if (recursive === void 0) { recursive = false; }\r\n    var result;\r\n    if (isText(node)) {\r\n        result = new Text(node.data);\r\n    }\r\n    else if (isComment(node)) {\r\n        result = new Comment(node.data);\r\n    }\r\n    else if (isTag(node)) {\r\n        var children = recursive ? cloneChildren(node.children) : [];\r\n        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);\r\n        children.forEach(function (child) { return (child.parent = clone_1); });\r\n        if (node.namespace != null) {\r\n            clone_1.namespace = node.namespace;\r\n        }\r\n        if (node[\"x-attribsNamespace\"]) {\r\n            clone_1[\"x-attribsNamespace\"] = __assign({}, node[\"x-attribsNamespace\"]);\r\n        }\r\n        if (node[\"x-attribsPrefix\"]) {\r\n            clone_1[\"x-attribsPrefix\"] = __assign({}, node[\"x-attribsPrefix\"]);\r\n        }\r\n        result = clone_1;\r\n    }\r\n    else if (isCDATA(node)) {\r\n        var children = recursive ? cloneChildren(node.children) : [];\r\n        var clone_2 = new CDATA(children);\r\n        children.forEach(function (child) { return (child.parent = clone_2); });\r\n        result = clone_2;\r\n    }\r\n    else if (isDocument(node)) {\r\n        var children = recursive ? cloneChildren(node.children) : [];\r\n        var clone_3 = new Document(children);\r\n        children.forEach(function (child) { return (child.parent = clone_3); });\r\n        if (node[\"x-mode\"]) {\r\n            clone_3[\"x-mode\"] = node[\"x-mode\"];\r\n        }\r\n        result = clone_3;\r\n    }\r\n    else if (isDirective(node)) {\r\n        var instruction = new ProcessingInstruction(node.name, node.data);\r\n        if (node[\"x-name\"] != null) {\r\n            instruction[\"x-name\"] = node[\"x-name\"];\r\n            instruction[\"x-publicId\"] = node[\"x-publicId\"];\r\n            instruction[\"x-systemId\"] = node[\"x-systemId\"];\r\n        }\r\n        result = instruction;\r\n    }\r\n    else {\r\n        throw new Error(\"Not implemented yet: \".concat(node.type));\r\n    }\r\n    result.startIndex = node.startIndex;\r\n    result.endIndex = node.endIndex;\r\n    if (node.sourceCodeLocation != null) {\r\n        result.sourceCodeLocation = node.sourceCodeLocation;\r\n    }\r\n    return result;\r\n}\r\nexports.cloneNode = cloneNode;\r\nfunction cloneChildren(childs) {\r\n    var children = childs.map(function (child) { return cloneNode(child, true); });\r\n    for (var i = 1; i < children.length; i++) {\r\n        children[i].prev = children[i - 1];\r\n        children[i - 1].next = children[i];\r\n    }\r\n    return children;\r\n}\r\n"]}